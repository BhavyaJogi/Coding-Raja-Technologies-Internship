<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Player</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="music-player">
        <div class="player-header">
            <h1>Music Player</h1>
        </div>
        <div class="music-library" id="musicLibrary">
            <!-- Display available tracks with album covers and artist names -->
            <!-- Each track should have a data-src attribute pointing to the audio file -->
            <div class="track" data-src="audio/track1.mp3">
                <img src="images/album1.jpg" alt="Album 1">
                <p>Track 1 - Artist 1</p>
            </div>
            <!-- Add more tracks as needed -->
        </div>
        <div class="player-controls">
            <audio id="audioPlayer" controls>
                Your browser does not support the audio element.
            </audio>
            <div class="controls">
                <button onclick="playPause()">Play/Pause</button>
                <button onclick="prevTrack()">Previous</button>
                <button onclick="nextTrack()">Next</button>
                <button onclick="shuffle()">Shuffle</button>
                <button onclick="repeat()">Repeat</button>
            </div>
            <div class="progress-bar">
                <div id="progress"></div>
            </div>
            <div class="volume-control">
                <label for="volume">Volume:</label>
                <input type="range" id="volume" name="volume" min="0" max="1" step="0.01" value="1" oninput="setVolume()">
            </div>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>

CSS code!!
/* Add your custom styles here */
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
}

.music-player {
    max-width: 600px;
    margin: 50px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.player-header h1 {
    text-align: center;
}

.music-library {
    margin-bottom: 20px;
    display: flex;
    flex-wrap: wrap;
}

.track {
    width: 45%;
    margin: 1%;
    box-sizing: border-box;
    overflow: hidden;
    position: relative;
    cursor: pointer;
}

.track img {
    width: 100%;
    height: auto;
    border-radius: 5px;
}

.track p {
    margin: 10px 0;
}

.player-controls {
    text-align: center;
}

.controls button {
    margin: 5px;
    padding: 8px 16px;
    font-size: 16px;
    cursor: pointer;
}

.progress-bar {
    height: 10px;
    background-color: #ddd;
    margin-top: 10px;
}

#progress {
    height: 100%;
    width: 0;
    background-color: #007bff;
}

.volume-control {
    margin-top: 10px;
}

.volume-control label {
    display: block;
    margin-bottom: 5px;
}

.volume-control input {
    width: 100%;
}


Java script Code!!!

const audioPlayer = document.getElementById('audioPlayer');
const progress = document.getElementById('progress');
const volumeControl = document.getElementById('volume');
const musicLibrary = document.getElementById('musicLibrary');
const tracks = document.querySelectorAll('.track');

let currentTrackIndex = 0;
let isShuffled = false;
let isRepeated = false;

function playPause() {
    if (audioPlayer.paused) {
        audioPlayer.play();
    } else {
        audioPlayer.pause();
    }
}

function prevTrack() {
    currentTrackIndex = (currentTrackIndex - 1 + tracks.length) % tracks.length;
    loadTrack();
}

function nextTrack() {
    currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
    loadTrack();
}

function shuffle() {
    isShuffled = !isShuffled;
    if (isShuffled) {
        randomizePlaylist();
    } else {
        resetPlaylistOrder();
    }
    loadTrack();
}

function repeat() {
    isRepeated = !isRepeated;
    audioPlayer.loop = isRepeated;
}

function randomizePlaylist() {
    const tracksArray = Array.from(tracks);
    for (let i = tracksArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        musicLibrary.appendChild(tracksArray[j]);
        [tracksArray[i], tracksArray[j]] = [tracksArray[j], tracksArray[i]];
    }
}

function resetPlaylistOrder() {
    const sortedTracks = Array.from(tracks).sort((a, b) => a.dataset.index - b.dataset.index);
    sortedTracks.forEach(track => musicLibrary.appendChild(track));
}

function loadTrack() {
    const
